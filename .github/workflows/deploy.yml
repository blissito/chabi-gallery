name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build --if-present
    
    - name: Run tests
      run: npm test --if-present
    
    - name: Deploy to production server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ENDPOINT_URL_S3: ${{ secrets.AWS_ENDPOINT_URL_S3 }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Install SSH key
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
        
        # Create deployment package
        tar -czf chabi-app.tar.gz --exclude=node_modules --exclude=.git .
        
        # Upload and deploy
        scp -i ~/.ssh/deploy_key chabi-app.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
        
        ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          cd $DEPLOY_PATH
          tar -xzf chabi-app.tar.gz
          npm ci --production
          
          # Create .env file
          cat > .env << 'ENVEOF'
        BUCKET_NAME=${{ secrets.BUCKET_NAME }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ENDPOINT_URL_S3=${{ secrets.AWS_ENDPOINT_URL_S3 }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        ENVEOF
          
          # Restart application (adjust this based on your deployment setup)
          pm2 restart chabi-app || pm2 start server.js --name chabi-app
        EOF
    
    - name: Notify deployment success
      if: success()
      run: echo "🚀 Deployment completed successfully!"
    
    - name: Notify deployment failure
      if: failure()
      run: echo "❌ Deployment failed!"